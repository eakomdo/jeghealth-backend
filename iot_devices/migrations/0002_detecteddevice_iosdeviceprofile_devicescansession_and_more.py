# Generated by Django 4.2.7 on 2025-09-08 02:54

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('iot_devices', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DetectedDevice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('device_name', models.CharField(blank=True, help_text='Device name if available', max_length=100, verbose_name='Device Name')),
                ('device_type', models.CharField(choices=[('IOS_PHONE', 'iOS Phone'), ('IOS_TABLET', 'iOS Tablet'), ('IOS_WATCH', 'Apple Watch'), ('IOS_AIRPODS', 'AirPods'), ('IOS_UNKNOWN', 'Unknown iOS Device'), ('ANDROID', 'Android Device'), ('WINDOWS', 'Windows Device'), ('MAC', 'Mac Device'), ('UNKNOWN', 'Unknown Device')], default='UNKNOWN', max_length=20, verbose_name='Device Type')),
                ('mac_address', models.CharField(blank=True, help_text='Device MAC address if available', max_length=17, verbose_name='MAC Address')),
                ('bluetooth_address', models.CharField(blank=True, help_text='Bluetooth address if available', max_length=17, verbose_name='Bluetooth Address')),
                ('signal_strength', models.IntegerField(blank=True, help_text='Signal strength in dBm', null=True, verbose_name='Signal Strength (dBm)')),
                ('connection_type', models.CharField(choices=[('BLUETOOTH', 'Bluetooth'), ('WIFI', 'WiFi'), ('BOTH', 'Both')], max_length=20, verbose_name='Connection Type')),
                ('manufacturer', models.CharField(blank=True, help_text='Device manufacturer if detected', max_length=50, verbose_name='Manufacturer')),
                ('ios_version', models.CharField(blank=True, help_text='iOS version if detected', max_length=20, verbose_name='iOS Version')),
                ('device_model', models.CharField(blank=True, help_text='Device model if detected', max_length=50, verbose_name='Device Model')),
                ('is_paired', models.BooleanField(default=False, help_text='Whether device is paired with scanning device', verbose_name='Is Paired')),
                ('is_ios_device', models.BooleanField(default=False, help_text='Whether this is confirmed to be an iOS device', verbose_name='Is iOS Device')),
                ('additional_info', models.JSONField(default=dict, help_text='Additional device information', verbose_name='Additional Info')),
                ('first_seen', models.DateTimeField(auto_now_add=True, verbose_name='First Seen')),
                ('last_seen', models.DateTimeField(auto_now=True, verbose_name='Last Seen')),
            ],
            options={
                'verbose_name': 'Detected Device',
                'verbose_name_plural': 'Detected Devices',
                'ordering': ['-last_seen'],
            },
        ),
        migrations.CreateModel(
            name='iOSDeviceProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('device_name', models.CharField(help_text='User-friendly device name', max_length=100, verbose_name='Device Name')),
                ('device_identifier', models.CharField(help_text='Unique identifier for the iOS device', max_length=100, unique=True, verbose_name='Device Identifier')),
                ('device_model', models.CharField(blank=True, max_length=50, verbose_name='Device Model')),
                ('ios_version', models.CharField(blank=True, max_length=20, verbose_name='iOS Version')),
                ('health_app_version', models.CharField(blank=True, max_length=20, verbose_name='Health App Version')),
                ('status', models.CharField(choices=[('DISCOVERED', 'Discovered'), ('PAIRED', 'Paired'), ('CONNECTED', 'Connected'), ('SYNCING', 'Syncing'), ('DISCONNECTED', 'Disconnected'), ('ERROR', 'Error')], default='DISCOVERED', max_length=20, verbose_name='Status')),
                ('last_sync', models.DateTimeField(blank=True, null=True, verbose_name='Last Sync')),
                ('sync_frequency', models.IntegerField(default=60, help_text='How often to sync data in minutes', verbose_name='Sync Frequency (minutes)')),
                ('available_health_data', models.JSONField(default=list, help_text='List of health data types available from this device', verbose_name='Available Health Data')),
                ('permissions_granted', models.JSONField(default=dict, help_text='Health data permissions granted by user', verbose_name='Permissions Granted')),
                ('sync_settings', models.JSONField(default=dict, help_text='Device-specific sync settings', verbose_name='Sync Settings')),
                ('is_primary_device', models.BooleanField(default=False, help_text="Whether this is the user's primary health device", verbose_name='Is Primary Device')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('detected_device', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ios_profile', to='iot_devices.detecteddevice')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ios_device_profiles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'iOS Device Profile',
                'verbose_name_plural': 'iOS Device Profiles',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='DeviceScanSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('scan_type', models.CharField(choices=[('BLUETOOTH', 'Bluetooth Scan'), ('WIFI', 'WiFi Scan'), ('COMBINED', 'Combined Scan')], max_length=20, verbose_name='Scan Type')),
                ('status', models.CharField(choices=[('INITIATED', 'Initiated'), ('SCANNING', 'Scanning'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('TIMEOUT', 'Timeout')], default='INITIATED', max_length=20, verbose_name='Status')),
                ('scan_duration', models.IntegerField(default=30, help_text='Duration of the scan in seconds', verbose_name='Scan Duration (seconds)')),
                ('devices_found', models.IntegerField(default=0, verbose_name='Devices Found')),
                ('ios_devices_found', models.IntegerField(default=0, verbose_name='iOS Devices Found')),
                ('scan_results', models.JSONField(default=dict, help_text='Raw scan results data', verbose_name='Scan Results')),
                ('error_message', models.TextField(blank=True, help_text='Error message if scan failed', verbose_name='Error Message')),
                ('initiated_at', models.DateTimeField(auto_now_add=True, verbose_name='Initiated At')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_scan_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Device Scan Session',
                'verbose_name_plural': 'Device Scan Sessions',
                'ordering': ['-initiated_at'],
            },
        ),
        migrations.AddField(
            model_name='detecteddevice',
            name='scan_session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detected_devices', to='iot_devices.devicescansession'),
        ),
        migrations.AlterUniqueTogether(
            name='detecteddevice',
            unique_together={('scan_session', 'mac_address', 'bluetooth_address')},
        ),
    ]
