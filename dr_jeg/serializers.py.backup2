from rest_framework import serializers
from drf_spectacular.utils import extend_schema_field
from django.utils import timezone
from datetime import timedelta
from .models import Conversation, Message


class MessageSerializer(serializers.ModelSerializer):
    """Serializer for AI conversation messages"""
    
    class Meta:
        model = Message
        fields = ['id', 'conversation', 'sender', 'content', 'timestamp']

    def create(self, validated_data):
        # Set sender to 'user' by default if not specified
        if 'sender' not in validated_data:
            validated_data['sender'] = 'user'
        return super().create(validated_data)


class ConversationListSerializer(serializers.ModelSerializer):
    """Simplified serializer for listing conversations"""
    message_count = serializers.SerializerMethodField()
    last_message = serializers.SerializerMethodField()
    last_activity = serializers.SerializerMethodField()
    preview_text = serializers.SerializerMethodField()
    
    @extend_schema_field(serializers.IntegerField)
    def get_message_count(self, obj):
        """Get count of messages in conversation"""
        return obj.messages.count()
    
    @extend_schema_field(serializers.CharField)
    def get_last_message(self, obj):
        """Get the last message content (truncated)"""
        last_message = obj.messages.order_by('-timestamp').first()
        if last_message:
            content = last_message.content
            return content[:100] + "..." if len(content) > 100 else content
        return None
    
    @extend_schema_field(serializers.DateTimeField)
    def get_last_activity(self, obj):
        """Get timestamp of last activity"""
        last_message = obj.messages.order_by('-timestamp').first()
        return last_message.timestamp if last_message else obj.created_at
    
    @extend_schema_field(serializers.CharField)
    def get_preview_text(self, obj):
        """Get conversation preview text"""
        first_message = obj.messages.filter(sender='user').first()
        if first_message:
            return first_message.content[:150] + "..." if len(first_message.content) > 150 else first_message.content
        return "New conversation"
    
    class Meta:
        model = Conversation
        fields = ['id', 'user', 'title', 'message_count', 'last_message', 'last_activity', 'preview_text', 'created_at']


class ConversationDetailSerializer(serializers.ModelSerializer):
    """Detailed serializer for conversation with messages"""
    message_count = serializers.SerializerMethodField()
    messages = MessageSerializer(many=True, read_only=True)
    user_message_count = serializers.SerializerMethodField()
    ai_message_count = serializers.SerializerMethodField()
    
    @extend_schema_field(serializers.IntegerField)
    def get_message_count(self, obj):
        """Get count of messages in conversation"""
        return obj.messages.count()
    
    @extend_schema_field(serializers.IntegerField)
    def get_user_message_count(self, obj):
        """Get count of user messages"""
        return obj.messages.filter(sender='user').count()
    
    @extend_schema_field(serializers.IntegerField)
    def get_ai_message_count(self, obj):
        """Get count of AI messages"""
        return obj.messages.filter(sender='ai').count()
    
    class Meta:
        model = Conversation
        fields = [
            'id', 'user', 'title', 'message_count', 'user_message_count', 
            'ai_message_count', 'messages', 'created_at', 'updated_at'
        ]


class ConversationCreateSerializer(serializers.ModelSerializer):
    """Serializer for creating conversations"""
    initial_message = serializers.CharField(write_only=True, required=False, help_text="Optional initial message")
    
    class Meta:
        model = Conversation
        fields = ['title', 'initial_message']
        
    def create(self, validated_data):
        # Set user to current user
        request = self.context.get('request')
        initial_message = validated_data.pop('initial_message', None)
        
        if request and request.user.is_authenticated:
            validated_data['user'] = request.user
            
        conversation = super().create(validated_data)
        
        # Create initial message if provided
        if initial_message:
            Message.objects.create(
                conversation=conversation,
                sender='user',
                content=initial_message
            )
            
        return conversation


class ConversationResponseSerializer(serializers.Serializer):
    """Serializer for AI conversation responses"""
    message = serializers.CharField(help_text="User message to send")
    conversation_id = serializers.UUIDField(required=False, help_text="Conversation ID (optional for new conversation)")
    title = serializers.CharField(required=False, max_length=200, help_text="Title for new conversation")
    
    def validate(self, data):
        """Validate conversation response data"""
        message = data.get('message', '').strip()
        if not message:
            raise serializers.ValidationError("Message cannot be empty")
        
        if len(message) > 5000:
            raise serializers.ValidationError("Message too long. Maximum 5000 characters allowed.")
            
        return data


class ConversationAnalyticsSerializer(serializers.Serializer):
    """Serializer for conversation analytics"""
    total_conversations = serializers.IntegerField()
    total_messages = serializers.IntegerField()
    user_messages = serializers.IntegerField()
    ai_messages = serializers.IntegerField()
    average_messages_per_conversation = serializers.FloatField()
    conversations_this_week = serializers.IntegerField()
    conversations_this_month = serializers.IntegerField()
    most_active_day = serializers.CharField()
    common_topics = serializers.ListField(child=serializers.DictField())
    conversation_length_distribution = serializers.DictField()
    daily_activity = serializers.ListField(child=serializers.DictField())


class ConversationBulkDeleteSerializer(serializers.Serializer):
    """Serializer for bulk deleting conversations"""
    conversation_ids = serializers.ListField(
        child=serializers.UUIDField(),
        min_length=1,
        max_length=100,
        help_text="List of conversation IDs to delete (max 100)"
    )
    confirm_delete = serializers.BooleanField(
        default=False,
        help_text="Confirm that you want to delete these conversations"
    )
    
    def validate(self, data):
        """Validate bulk delete data"""
        if not data.get('confirm_delete'):
            raise serializers.ValidationError("You must confirm the deletion by setting confirm_delete to true")
        
        conversation_ids = data.get('conversation_ids', [])
        if len(conversation_ids) != len(set(conversation_ids)):
            raise serializers.ValidationError("Duplicate conversation IDs found")
            
        return data


class HealthAnalysisRequestSerializer(serializers.Serializer):
    """Serializer for health analysis requests"""
    symptoms = serializers.ListField(
        child=serializers.CharField(max_length=100),
        min_length=1,
        max_length=20,
        help_text="List of symptoms (1-20 symptoms)"
    )
    duration = serializers.CharField(
        required=False,
        max_length=100,
        help_text="Duration of symptoms (e.g., '3 days', '2 weeks')"
    )
    severity = serializers.ChoiceField(
        choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe')],
        required=False,
        help_text="Severity level of symptoms"
    )
    age = serializers.IntegerField(
        required=False,
        min_value=1,
        max_value=150,
        help_text="Patient age"
    )
    gender = serializers.ChoiceField(
        choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')],
        required=False,
        help_text="Patient gender"
    )
    medical_history = serializers.ListField(
        child=serializers.CharField(max_length=200),
        required=False,
        max_length=10,
        help_text="Relevant medical history (max 10 items)"
    )
    current_medications = serializers.ListField(
        child=serializers.CharField(max_length=100),
        required=False,
        max_length=20,
        help_text="Current medications (max 20 items)"
    )
    additional_info = serializers.CharField(
        required=False,
        max_length=1000,
        help_text="Additional information about the condition"
    )
    
    def validate_symptoms(self, value):
        """Validate symptoms list"""
        cleaned_symptoms = []
        for symptom in value:
            symptom = symptom.strip()
            if symptom and len(symptom) >= 2:
                cleaned_symptoms.append(symptom)
        
        if not cleaned_symptoms:
            raise serializers.ValidationError("At least one valid symptom is required")
        
        return cleaned_symptoms


class ConversationSerializer(serializers.ModelSerializer):
    """Standard serializer for conversations (backward compatibility)"""
    message_count = serializers.SerializerMethodField()
    
    @extend_schema_field(serializers.IntegerField)
    def get_message_count(self, obj):
        """Get count of messages in conversation"""
        return obj.messages.count()
    
    class Meta:
        model = Conversation
        fields = ['id', 'user', 'title', 'message_count', 'created_at', 'updated_at']


# Response Serializers for API Documentation
class AIResponseSerializer(serializers.Serializer):
    """Serializer for AI response format"""
    conversation_id = serializers.UUIDField()
    user_message = serializers.CharField()
    ai_response = serializers.CharField()
    message_id = serializers.IntegerField()
    timestamp = serializers.DateTimeField()
    conversation_title = serializers.CharField()


class HealthAnalysisResponseSerializer(serializers.Serializer):
    """Serializer for health analysis response format"""
    analysis = serializers.CharField(help_text="AI health analysis")
    recommendations = serializers.ListField(
        child=serializers.CharField(),
        help_text="List of health recommendations"
    )
    urgency_level = serializers.CharField(help_text="Urgency level: low, medium, high, emergency")
    suggested_specialists = serializers.ListField(
        child=serializers.CharField(),
        required=False,
        help_text="Suggested medical specialists to consult"
    )
    disclaimer = serializers.CharField(help_text="Medical disclaimer")
    conversation_id = serializers.UUIDField(required=False, help_text="Created conversation ID")


class ConversationStatsSerializer(serializers.Serializer):
    """Serializer for conversation statistics"""
    total_conversations = serializers.IntegerField()
    active_conversations = serializers.IntegerField()
    total_messages = serializers.IntegerField()
    average_messages_per_conversation = serializers.FloatField()
    conversations_today = serializers.IntegerField()
    conversations_this_week = serializers.IntegerField()
    conversations_this_month = serializers.IntegerField()
