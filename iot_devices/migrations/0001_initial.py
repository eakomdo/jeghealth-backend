# Generated by Django 4.2.7 on 2025-07-24 12:07

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='IoTDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Device ID')),
                ('name', models.CharField(help_text='Human-readable name for the device', max_length=100, verbose_name='Device Name')),
                ('device_type', models.CharField(choices=[('SMARTWATCH', 'Smart Watch'), ('FITNESS_TRACKER', 'Fitness Tracker'), ('BLOOD_PRESSURE_MONITOR', 'Blood Pressure Monitor'), ('GLUCOSE_METER', 'Glucose Meter'), ('SCALE', 'Smart Scale'), ('THERMOMETER', 'Digital Thermometer'), ('PULSE_OXIMETER', 'Pulse Oximeter'), ('ECG_MONITOR', 'ECG Monitor'), ('SLEEP_TRACKER', 'Sleep Tracker'), ('OTHER', 'Other')], max_length=25, verbose_name='Device Type')),
                ('manufacturer', models.CharField(blank=True, max_length=100, verbose_name='Manufacturer')),
                ('model', models.CharField(blank=True, max_length=100, verbose_name='Model')),
                ('firmware_version', models.CharField(blank=True, max_length=50, verbose_name='Firmware Version')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('MAINTENANCE', 'Maintenance'), ('ERROR', 'Error')], default='INACTIVE', max_length=15, verbose_name='Status')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether the device has been verified and authorized', verbose_name='Is Verified')),
                ('last_seen', models.DateTimeField(blank=True, help_text='Last time the device sent data', null=True, verbose_name='Last Seen')),
                ('api_key', models.CharField(blank=True, help_text='API key for device authentication', max_length=64, unique=True, verbose_name='API Key')),
                ('supported_metrics', models.JSONField(default=list, help_text='List of health metrics this device can measure', verbose_name='Supported Metrics')),
                ('calibration_date', models.DateTimeField(blank=True, help_text='Last calibration date', null=True, verbose_name='Calibration Date')),
                ('accuracy_score', models.FloatField(default=0.95, help_text='Device accuracy score (0-1)', verbose_name='Accuracy Score')),
                ('configuration', models.JSONField(default=dict, help_text='Device-specific configuration settings', verbose_name='Configuration')),
                ('location', models.CharField(blank=True, help_text='Physical location of the device', max_length=100, verbose_name='Location')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='iot_devices', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'IoT Device',
                'verbose_name_plural': 'IoT Devices',
                'db_table': 'iot_devices_iotdevice',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DeviceDataBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_id', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='Batch ID')),
                ('data_count', models.IntegerField(default=0, help_text='Number of data points in this batch', verbose_name='Data Count')),
                ('batch_start_time', models.DateTimeField(help_text='Earliest timestamp in the batch', verbose_name='Batch Start Time')),
                ('batch_end_time', models.DateTimeField(help_text='Latest timestamp in the batch', verbose_name='Batch End Time')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('PARTIAL', 'Partially Processed')], default='PENDING', max_length=15, verbose_name='Status')),
                ('processed_count', models.IntegerField(default=0, help_text='Number of successfully processed data points', verbose_name='Processed Count')),
                ('error_count', models.IntegerField(default=0, help_text='Number of data points that failed processing', verbose_name='Error Count')),
                ('raw_data', models.JSONField(help_text='Raw data from the device', verbose_name='Raw Data')),
                ('processing_errors', models.JSONField(default=list, help_text='List of processing errors', verbose_name='Processing Errors')),
                ('checksum', models.CharField(blank=True, help_text='Data integrity checksum', max_length=64, verbose_name='Checksum')),
                ('received_at', models.DateTimeField(auto_now_add=True, verbose_name='Received At')),
                ('processed_at', models.DateTimeField(blank=True, null=True, verbose_name='Processed At')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_batches', to='iot_devices.iotdevice', verbose_name='Device')),
            ],
            options={
                'verbose_name': 'Device Data Batch',
                'verbose_name_plural': 'Device Data Batches',
                'db_table': 'iot_devices_devicedatabatch',
                'ordering': ['-received_at'],
            },
        ),
        migrations.CreateModel(
            name='DeviceAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('OFFLINE', 'Device Offline'), ('LOW_BATTERY', 'Low Battery'), ('CALIBRATION_DUE', 'Calibration Due'), ('DATA_ANOMALY', 'Data Anomaly'), ('SYNC_ERROR', 'Sync Error'), ('FIRMWARE_UPDATE', 'Firmware Update Available'), ('SENSOR_ERROR', 'Sensor Error'), ('MAINTENANCE_DUE', 'Maintenance Due')], max_length=20, verbose_name='Alert Type')),
                ('severity', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], default='MEDIUM', max_length=10, verbose_name='Severity')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('message', models.TextField(help_text='Detailed alert message', verbose_name='Message')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('is_acknowledged', models.BooleanField(default=False, verbose_name='Is Acknowledged')),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True, verbose_name='Acknowledged At')),
                ('is_resolved', models.BooleanField(default=False, verbose_name='Is Resolved')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Resolved At')),
                ('resolution_notes', models.TextField(blank=True, help_text='Notes about how the alert was resolved', verbose_name='Resolution Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL, verbose_name='Acknowledged By')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='iot_devices.iotdevice', verbose_name='Device')),
            ],
            options={
                'verbose_name': 'Device Alert',
                'verbose_name_plural': 'Device Alerts',
                'db_table': 'iot_devices_devicealert',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='iotdevice',
            index=models.Index(fields=['owner', 'device_type'], name='iot_devices_owner_i_ee07b9_idx'),
        ),
        migrations.AddIndex(
            model_name='iotdevice',
            index=models.Index(fields=['status', 'is_verified'], name='iot_devices_status_5dde98_idx'),
        ),
        migrations.AddIndex(
            model_name='devicedatabatch',
            index=models.Index(fields=['device', 'status'], name='iot_devices_device__ec6629_idx'),
        ),
        migrations.AddIndex(
            model_name='devicedatabatch',
            index=models.Index(fields=['batch_start_time', 'batch_end_time'], name='iot_devices_batch_s_2e1c13_idx'),
        ),
        migrations.AddIndex(
            model_name='devicealert',
            index=models.Index(fields=['device', 'is_active', 'severity'], name='iot_devices_device__8f6c75_idx'),
        ),
        migrations.AddIndex(
            model_name='devicealert',
            index=models.Index(fields=['alert_type', 'is_active'], name='iot_devices_alert_t_f3f70e_idx'),
        ),
    ]
